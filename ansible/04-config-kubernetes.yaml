# Configurando kubernetes en el nodo master, que se realizará solo en el nodo master.local
# Añadir también a este playbook las tareas que aparecen en "Creamos un usuario administrador"
# que se encuentra al final del procedimiento.
# firewall-cmd --permanent --add-port=6443/tcp (Kubernetes API Server)
# firewall-cmd --permanent --add-port=2379-2380/tcp (etcd server client API)
# firewall-cmd --permanent --add-port=10250/tcp (Kubelet API)
# firewall-cmd --permanent --add-port=10251/tcp (kube-scheduler)
# firewall-cmd --permanent --add-port=10252/tcp (kube-controller-manager)
# firewall-cmd --permanent --add-port=10255/tcp (Statistics)
# firewall-cmd --reload

# Configuring kubernetes on the master node
- name: Configuring kubernetes on the master node
  gather_facts: false
  hosts: master
  tasks:

    # We configure the firewall to access the kubernetes services (1/2)
    - name: configure the firewall to access the kubernetes services (1/2)
      firewalld:
        port: "{{ item }}"
        permanent: yes
        state: enabled
      with_items:        
        - 6443/tcp
        - 2379-2380/tcp
        - 10250/tcp
        - 10251/tcp
        - 10252/tcp
        - 10255/tcp
      become: yes

    # Reload 'firewalld' service (1/2)
    - name: reload 'firewalld' service (1/2)
      systemd:
        name: firewalld
        state: reloaded
      become: yes  

    # Config kubeadm
    - name: config kubeadm
      command: /usr/bin/kubeadm config images pull
      become: yes
    
    # Allow access from workers (1/2)
    # firewall-cmd --permanent --add-rich-rule 'rule family=ipv4 source address=192.168.1.111/32 accept'
    # firewall-cmd --permanent --add-rich-rule 'rule family=ipv4 source address=192.168.1.112/32 accept'
    # firewall-cmd --reload
    - name: allow access from workers (1/2)
      firewalld:
        rich_rule: "rule family=ipv4 source address={{ item }}/32 accept"
        state: enabled
        permanent: yes
      with_items:
        - 192.168.1.101
      become: yes

    # Reload 'firewalld' service (2/2)
    - name: reload 'firewalld' service (2/2)
      systemd:
        name: firewalld
        state: reloaded
      become: yes             


    # Allow access from containers to localhost (1/2)
    # firewall-cmd --zone=public --permanent --add-rich-rule 'rule family=ipv4 source address=172.17.0.0/16 accept'
    # firewall-cmd --reload
    - name: allow access from containers to localhost (1/2)
      firewalld:
        rich_rule: "rule family=ipv4 source address={{ item }}/16 accept"
        state: enabled
        permanent: yes
      with_items:
        - 172.17.0.0
      become: yes

    # Reload 'firewalld' service (2/2)
    - name: reload 'firewalld' service (2/2)
      systemd:
        name: firewalld
        state: reloaded
      become: yes


    # Install kubernetes CNI (Container Network Interface) plugin and define the PODs network
    # mkdir -p /root/.kube
    # cp -i /etc/kubernetes/admin.conf /root/.kube/config
    # chown $(id -u):$(id -g) /root/.kube/config
    # kubectl get nodes
    - name: initialize the cluster
      shell: kubeadm init --pod-network-cidr 192.169.0.0/16 >> cluster_initialized.txt
      args:
        chdir: $HOME
        creates: cluster_initialized.txt   
      become: yes 

    - name: create .kube directory
      become: yes
      become_user: root
      file:
        path: $HOME/.kube
        state: directory
        mode: 0755
    
    - name: copy admin.conf to root user kube config
      become: yes    
      copy:
        src: /etc/kubernetes/admin.conf
        dest: $HOME/.kube/config
        owner: root
        group: root
